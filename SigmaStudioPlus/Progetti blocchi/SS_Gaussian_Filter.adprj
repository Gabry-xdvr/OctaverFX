{
  "WriteablePlugins": {
    "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsPlugin, AlgorithmDesigner]], mscorlib",
    "$values": [
      {
        "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPluginModel, AlgorithmDesigner",
        "Name": "SS_Gaussian_Filter",
        "PluginVersion": "1.0.0.0",
        "DesignerVersion": 4000,
        "TargetInterface": "ISharcXIAlgorithm",
        "ShapeCategory": 2,
        "ProcessingType": 0,
        "Caption": "GausFilter",
        "UICaption": "GaussPitch",
        "Description": "",
        "TreeHierarchy": "Custom Blocks.Filter.PitchFilter",
        "Documentation": "",
        "RestrictPlugin": false,
        "DefaultExpandedUiReference": "",
        "AlgorithmPluginName": "AnalogDevices.Plugins.Algorithms.Designer.ISharcXIAlgorithm.Block.SS_Gaussian_Filter",
        "ComputePluginName": "AnalogDevices.Plugins.ComputeFunctions.Designer.SS_Gaussian_Filter",
        "ControlPluginName": "AnalogDevices.Plugins.SigmaStudioControls.Algorithms.Designer.SS_Gaussian_Filter",
        "AbstractParameters": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsAbstractParam, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsAbstractParamModel, AlgorithmDesigner",
              "Name": "Param0",
              "DataType": 1,
              "Value": 0.0,
              "DefaultValue": 0.0,
              "IsUIAssigned": false,
              "DependencyProperty": "AP_Param0"
            }
          ]
        },
        "ModuleParameters": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsModuleParam, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsModuleParamModel, AlgorithmDesigner",
              "Name": "MP",
              "IsBuffer": false,
              "Formula": "Param0",
              "Value": 0.0,
              "Values": [],
              "Offset": 0,
              "IsSafeload": false,
              "Group": "",
              "DataFormat": "Float",
              "DependencyProperty": ""
            }
          ]
        },
        "Pins": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsPin, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "IN",
              "IsInput": true,
              "DataType": "Audio",
              "PinType": "Analog",
              "DependencyProperty": ""
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "OUT",
              "IsInput": false,
              "DataType": "Audio",
              "PinType": "Analog",
              "DependencyProperty": ""
            }
          ]
        },
        "Properties": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsProperty, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPropertyModel, AlgorithmDesigner",
              "Name": "AP_Param0",
              "DataType": 1,
              "DefaultValue": 0.0,
              "DependencyPostfix": null,
              "PropertyUsage": 2,
              "PropertyType": 0,
              "UpdateDirection": 0,
              "Description": "",
              "ItemSource": [],
              "DependencyProperty": ""
            }
          ]
        },
        "Assignments": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsAssignment, AlgorithmDesigner]], mscorlib",
          "$values": []
        },
        "MemorySize": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsMemory, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State",
              "Size": 20,
              "Formula": "20"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State B",
              "Size": 20,
              "Formula": "20"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State C",
              "Size": 20,
              "Formula": "20"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State (Ext Pre)",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "Scratch (PM)",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "Scratch (DM)",
              "Size": 0,
              "Formula": "0"
            }
          ]
        },
        "ParamMemorySize": 1,
        "RepCountProperty": null,
        "RepCount2Property": null,
        "ControlHeight": 200,
        "ControlWidth": 200,
        "UIControl": "&lt;UserControl xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\r\n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\r\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\r\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\r\n             mc:Ignorable=&quot;d&quot;&gt;\r\n  &lt;Grid Width=&quot;300&quot; Height=&quot;300&quot; /&gt;\r\n&lt;/UserControl&gt;",
        "IsDynamicUI": false,
        "UIDependencyProperty": "",
        "UIDirection": "Horizontal",
        "Code": "string.Empty",
        "RawCode": "",
        "SourceType": 2,
        "CSourceCode": "\"#include \\\"adi_ss_extmod.h\\\" \\r\\n#include <math.h>\\r\\n\\r\\n#pragma section(\\\"seg_pmco\\\")\\r\\nvoid BPROCESS_SS_Gaussian_Filter(SSBlockAlgo* pBlkAlgoInfo) \\r\\n{ \\r\\n    int prjBlockSize,algBlockSize,sample;\\r\\n    float *pInput, *pOutput;\\r\\n    float *signal;\\r\\n    int signal_size = 9;\\r\\n    float sigma = 1;\\r\\n    int filter_size = 11;\\r\\n    float *filtered_signal;\\r\\n    float pitchOut;\\r\\n    prjBlockSize = pBlkAlgoInfo->pInputs[0].pBlockProperties->nBlockSize;\\r\\n    // Input and output audio signal\\r\\n    pInput = pBlkAlgoInfo->pInputs[0].pSamples;\\r\\n    pOutput = pBlkAlgoInfo->pOutputs[0].pSamples;\\r\\n    //State memory to store samples\\r\\n    signal = (float*)(pBlkAlgoInfo->pState);\\r\\n    filtered_signal = (float*)(pBlkAlgoInfo->pStateB);\\r\\n  \\r\\n    \\r\\n    if(pInput[0] != signal[signal_size-1]){\\r\\n        for(int i = 0; i< signal_size-1;i++){\\r\\n            signal[i] = signal[i+1];\\r\\n        }\\r\\n        signal[signal_size-1] = pInput[0];\\r\\n    }\\r\\n    // Create the Gaussian kernel\\r\\n    int half_size = (filter_size - 1) / 2;\\r\\n    float g[11];\\r\\n    float sum = 0.0;\\r\\n    for (int i = -half_size; i <= half_size; ++i) {\\r\\n        g[i + half_size] = exp(-(i * i) / (2 * sigma * sigma));\\r\\n        sum += g[i + half_size];\\r\\n    }\\r\\n    // Normalize the Gaussian kernel\\r\\n    for (int i = 0; i < filter_size; ++i) {\\r\\n    \\tif(sum != 0){\\r\\n        g[i] /= sum;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Apply the Gaussian filter to the signal\\r\\n    for (int i = 0; i < signal_size; ++i) {\\r\\n        filtered_signal[i] = 0.0;\\r\\n        for (int j = -half_size; j <= half_size; ++j) {\\r\\n            int signal_index = i + j;\\r\\n            if (signal_index >= 0 && signal_index < signal_size) {\\r\\n                filtered_signal[i] += signal[signal_index] * g[j + half_size];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    if((fabs(pitchOut-signal[signal_size])*100/signal[signal_size])<0.1){\\r\\n        pitchOut = signal[signal_size];\\r\\n    }else\\r\\n    if(filtered_signal[4]>80){\\r\\n        pitchOut = filtered_signal[4];\\r\\n        signal[signal_size] = pitchOut;\\r\\n    }\\r\\n    \\r\\n    // Output the estimated pitch for each sample in the block\\r\\n    for(sample = 0; sample < prjBlockSize; sample++){\\r\\n        pOutput[sample] = pitchOut;\\r\\n    }\\r\\n}\"",
        "CHeaderFiles": {
          "adi_ss_extmod.h": "\"/****************************************************************************\\r\\nCopyright (c) 2022 - Analog Devices Inc. All Rights Reserved.\\r\\nThis software is proprietary & confidential to Analog Devices, Inc.\\r\\nand its licensors.\\r\\n*****************************************************************************\\r\\n\\r\\nDescription: Common header file for implementing plugin modules.\\r\\n\\r\\n*****************************************************************************/\\r\\n\\r\\n#ifndef  __ADI_SS_EXTMOD_H__\\r\\n#define  __ADI_SS_EXTMOD_H__\\r\\n\\r\\n/*============= I N C L U D E S =============*/\\r\\n\\r\\n#include <platform_include.h>\\r\\n#include <adi_types.h>\\r\\n\\r\\n/*============= D E F I N E S =============*/\\r\\n\\r\\n\\r\\n/*=============  D A T A    T Y P E S   =============*/\\r\\n\\r\\n#if defined(_LANGUAGE_C)\\r\\n\\r\\n#ifdef __cplusplus\\r\\nextern \\\"C\\\" {\\r\\n#endif /* __cplusplus */\\r\\n\\r\\n/*\\r\\n**  Structure: BlockProperties\\r\\n**  Input/Output block property structure\\r\\n*/\\r\\n\\r\\ntypedef struct _BlockProperties\\r\\n{\\r\\n    int32_t     nSamplingRate;  /* Sample rate of the audio block */\\r\\n    int32_t     nBlockSize;     /* Block size of the audio block */\\r\\n    int32_t     nReserve0;      /* Reserved */\\r\\n    int32_t     nReserve1;      /* Reserved */    \\r\\n} BlockProperties;\\r\\n\\r\\n\\r\\n/*\\r\\n**  Structure: Block\\r\\n**  Input/Output block structure\\r\\n*/\\r\\n\\r\\ntypedef struct _Block\\r\\n{\\r\\n    BlockProperties *pBlockProperties;\\r\\n    float32_t       *pSamples;  /* Pointer to the sample buffer */    \\r\\n} Block;\\r\\n\\r\\n\\r\\n/*\\r\\n**  Structure: SSBlockAlgo\\r\\n**  Block algorithm argument structure\\r\\n*/\\r\\n\\r\\ntypedef struct _SSBlockAlgo\\r\\n{\\r\\n    int32_t     nInputs;        /* Number of input pins */\\r\\n    int32_t     nOutputs;       /* Number of output pins */\\r\\n    Block      *pInputs;        /* Pointer to array of block i/o mem structure */\\r\\n    Block      *pOutputs;       /* Pointer to array of block i/o mem structure */\\r\\n    \\r\\n    int32_t     nGrowth;        /* Indicates growth count */\\r\\n    int32_t     nGrowthB;       /* Secondary growth count */\\r\\n    \\r\\n    void       *pParam;         /* Pointer to parameter memory */\\r\\n    float32_t  *pState;         /* Pointer to state memory */\\r\\n    float32_t  *pScratchDM;     /* Pointer to scratch in DM memory */ \\r\\n    float32_t  *pScratchPM;     /* Pointer to scratch in PM memory */ \\r\\n    float32_t  *pStateB;        /* Pointer to state memory B */ \\r\\n    float32_t  *pStateC;        /* Pointer to state memory C */ \\r\\n    float32_t  *pExtPreState;   /* Pointer to extended precision state memory */\\r\\n    int32_t    *pExtSymbols;    /* Pointer to symbol address table */\\r\\n    float32_t  *pSharedMem;     /* Pointer to shared memory buffer in L2 */        \\r\\n} SSBlockAlgo;\\r\\n\\r\\n\\r\\n#ifdef __cplusplus\\r\\n}\\r\\n#endif  /* __cplusplus */\\r\\n\\r\\n#else   /* not _LANGUAGE_C */\\r\\n\\r\\n/* Assembler-specific definitions */\\r\\n\\r\\n#endif  /* _LANGUAGE_C */\\r\\n\\r\\n#endif /*__ADI_SS_EXTMOD_H__*/\\r\\n\\r\\n/*\\r\\n** EOF: \\r\\n*/\\r\\n\""
        },
        "EmbeddedDLBs": {},
        "ReferencedDLBs": {},
        "AlgorithmProperties": {
          "$type": "System.Collections.ObjectModel.Collection`1[[System.String, mscorlib]], mscorlib",
          "$values": []
        },
        "GenerateAlgorithm": true,
        "GenerateCompute": true,
        "ComputePluginReference": "AnalogDevices.Plugins.ComputeFunctions.Designer.SS_Gaussian_Filter_v1.0.0.0",
        "GenerateUI": true,
        "ControlPluginReference": "AnalogDevices.Plugins.SigmaStudioControls.Algorithms.Designer.SS_Gaussian_Filter_v1.0.0.0",
        "GenerateControl": true
      }
    ]
  },
  "AssemblyTitle": null,
  "AssemblyDescription": null,
  "AssemblyCompany": null,
  "AssemblyProduct": null,
  "AssemblyCopyright": null,
  "ComVisible": false,
  "AssemblyVersion": "1.0.0.0"
}