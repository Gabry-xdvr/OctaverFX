{
  "WriteablePlugins": {
    "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsPlugin, AlgorithmDesigner]], mscorlib",
    "$values": [
      {
        "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPluginModel, AlgorithmDesigner",
        "Name": "APBandPass",
        "PluginVersion": "1.0.0.0",
        "DesignerVersion": 4000,
        "TargetInterface": "ISharcXIAlgorithm",
        "ShapeCategory": 2,
        "ProcessingType": 0,
        "Caption": "BandPass F/Q Input",
        "UICaption": "BandPass",
        "Description": "All Pass BandPass filter with F and Q input for time varying applications ",
        "TreeHierarchy": "Custom Blocks.Filter",
        "Documentation": "",
        "RestrictPlugin": false,
        "DefaultExpandedUiReference": "",
        "AlgorithmPluginName": "AnalogDevices.Plugins.Algorithms.Designer.ISharcXIAlgorithm.Block.APBandPass",
        "ComputePluginName": "AnalogDevices.Plugins.ComputeFunctions.Designer.APBandPass",
        "ControlPluginName": "AnalogDevices.Plugins.SigmaStudioControls.Algorithms.Designer.APBandPass",
        "AbstractParameters": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsAbstractParam, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsAbstractParamModel, AlgorithmDesigner",
              "Name": "Param0",
              "DataType": 1,
              "Value": 0.0,
              "DefaultValue": 0.0,
              "IsUIAssigned": false,
              "DependencyProperty": "AP_Param0"
            }
          ]
        },
        "ModuleParameters": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsModuleParam, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsModuleParamModel, AlgorithmDesigner",
              "Name": "MP",
              "IsBuffer": false,
              "Formula": "Param0",
              "Value": 0.0,
              "Values": [],
              "Offset": 0,
              "IsSafeload": false,
              "Group": "",
              "DataFormat": "Float",
              "DependencyProperty": ""
            }
          ]
        },
        "Pins": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsPin, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "AudioIN",
              "IsInput": true,
              "DataType": "Audio",
              "PinType": "Analog",
              "DependencyProperty": ""
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "fIN",
              "IsInput": true,
              "DataType": "Control",
              "PinType": "Analog",
              "DependencyProperty": ""
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "qIN",
              "IsInput": true,
              "DataType": "Control",
              "PinType": "Analog",
              "DependencyProperty": ""
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPinModel, AlgorithmDesigner",
              "Name": "bpOUT",
              "IsInput": false,
              "DataType": "Audio",
              "PinType": "Analog",
              "DependencyProperty": ""
            }
          ]
        },
        "Properties": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsProperty, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsPropertyModel, AlgorithmDesigner",
              "Name": "AP_Param0",
              "DataType": 1,
              "DefaultValue": 0.0,
              "DependencyPostfix": null,
              "PropertyUsage": 2,
              "PropertyType": 0,
              "UpdateDirection": 0,
              "Description": "",
              "ItemSource": [],
              "DependencyProperty": ""
            }
          ]
        },
        "Assignments": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsAssignment, AlgorithmDesigner]], mscorlib",
          "$values": []
        },
        "MemorySize": {
          "$type": "System.Collections.ObjectModel.Collection`1[[AnalogDevices.Plugins.Designer.AlgorithmDesigner.Model.ISsMemory, AlgorithmDesigner]], mscorlib",
          "$values": [
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State B",
              "Size": 2,
              "Formula": "2"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State C",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "State (Ext Pre)",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "Scratch (PM)",
              "Size": 0,
              "Formula": "0"
            },
            {
              "$type": "AnalogDevices.Plugins.Designer.AlgorithmDesigner.ModelInternal.SsMemoryModel, AlgorithmDesigner",
              "Name": "Scratch (DM)",
              "Size": 0,
              "Formula": "0"
            }
          ]
        },
        "ParamMemorySize": 1,
        "RepCountProperty": null,
        "RepCount2Property": null,
        "ControlHeight": 39,
        "ControlWidth": 5,
        "UIControl": "&lt;UserControl x:Name=&quot;_PRTJWGQ&quot;\r\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\r\n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\r\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\r\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\r\n             xmlns:Controls0=&quot;clr-namespace:AnalogDevices.Plugins.SigmaStudioUserControls.ToggleControl;assembly=SigmaStudioUserControls&quot;\r\n             mc:Ignorable=&quot;d&quot;&gt;\r\n  &lt;Grid x:Name=&quot;_VGTKVTC&quot; Width=&quot;108&quot; Height=&quot;132&quot;&gt;\r\n    &lt;TextBlock x:Name=&quot;_XVSJCSO&quot;\r\n               Width=&quot;75&quot;\r\n               Height=&quot;25&quot;\r\n               Margin=&quot;4.5,29.9,0,0&quot;\r\n               HorizontalAlignment=&quot;Left&quot;\r\n               VerticalAlignment=&quot;Top&quot;\r\n               Text=&quot;Audio&quot;\r\n               Grid.Column=&quot;0&quot;\r\n               Grid.Row=&quot;0&quot; /&gt;\r\n    &lt;TextBlock x:Name=&quot;_QFPESWE&quot;\r\n               Width=&quot;49&quot;\r\n               Height=&quot;16&quot;\r\n               Margin=&quot;5,58,0,0&quot;\r\n               HorizontalAlignment=&quot;Left&quot;\r\n               VerticalAlignment=&quot;Top&quot;\r\n               Text=&quot;F&quot;\r\n               Grid.Column=&quot;0&quot;\r\n               Grid.Row=&quot;0&quot; /&gt;\r\n    &lt;TextBlock x:Name=&quot;_RVICDAD&quot;\r\n               Width=&quot;75&quot;\r\n               Height=&quot;25&quot;\r\n               Margin=&quot;4.80000000000018,93,0,0&quot;\r\n               HorizontalAlignment=&quot;Left&quot;\r\n               VerticalAlignment=&quot;Top&quot;\r\n               RenderTransformOrigin=&quot;0.5,0.5&quot;\r\n               Text=&quot;Q&quot;\r\n               Grid.Column=&quot;0&quot;\r\n               Grid.Row=&quot;0&quot; /&gt;\r\n  &lt;/Grid&gt;\r\n&lt;/UserControl&gt;",
        "IsDynamicUI": false,
        "UIDependencyProperty": "",
        "UIDirection": "Horizontal",
        "Code": "string.Empty",
        "RawCode": "",
        "SourceType": 2,
        "CSourceCode": "\"// State variable bandpass filter function from DAFX2 book ported in C language used inside the block Process function :)\\r\\n#include \\\"adi_ss_extmod.h\\\" \\r\\n#include <math.h>\\r\\n\\r\\n\\r\\n#pragma section(\\\"seg_pmco\\\") \\r\\nvoid BPROCESS_APBandPass(SSBlockAlgo* pBlkAlgoInfo) \\r\\n{ \\r\\n\\tint sample, blockSize;\\r\\n\\tfloat fs,x,c,d,xh_new,ap_y;\\r\\n\\tfloat Wc,Wb;\\r\\n\\tfloat *pInput, *pOutput, *fInput, *QInput;\\r\\n\\tfloat *memory;\\r\\n\\tfloat xh[2];\\r\\n\\tfloat PI = 3.14159265358979323846;\\r\\n\\t//puntatore alla stateMemory\\r\\n\\tmemory = (float*)(pBlkAlgoInfo->pStateB);\\r\\n\\t\\r\\n\\tblockSize = pBlkAlgoInfo->pInputs[0].pBlockProperties->nBlockSize;\\r\\n\\t//frequenza di sample per le normalizzazioni\\r\\n\\tfs = pBlkAlgoInfo->pInputs[0].pBlockProperties->nSamplingRate;\\r\\n\\t//PI = ((float *)pBlkAlgoInfo->pParam)[0];\\r\\n\\t//Q = ((float *)pBlkAlgoInfo->pParam)[0];\\r\\n\\t// ricarico gli ultimi coefficienti del filtro\\r\\n\\txh[0] = memory[0];\\r\\n\\txh[1] = memory[1];\\r\\n\\t// segnale audio in ingresso -> input 1\\r\\n\\tpInput = pBlkAlgoInfo->pInputs[0].pSamples;\\r\\n\\t// segnale di controllo in ingresso -> input 2\\r\\n\\tfInput = (float*)pBlkAlgoInfo->pInputs[1].pSamples;\\r\\n\\t// segnale di controllo in ingresso -> input 3\\r\\n\\tQInput = (float*)pBlkAlgoInfo->pInputs[2].pSamples;\\r\\n\\t// segnale audio in uscita\\r\\n\\tpOutput = pBlkAlgoInfo->pOutputs[0].pSamples;\\r\\n\\t\\r\\n\\t//ciclo su tutti i sample del blocco sui quali applico il filtraggio\\r\\n\\tfor(sample = 0; sample < blockSize; sample++)\\r\\n\\t{\\r\\n\\t\\t//Calcolo per ogni campione le frequenze normalizzate\\r\\n\\t\\t\\r\\n\\t\\tWc = 2*fInput[sample]/fs;\\r\\n\\t\\tWb = Wc/QInput[sample]; // Q = f0/BW -> BW[Hz] = f0[Hz]/Q\\r\\n \\t\\tx = pInput[sample];\\r\\n\\t\\t\\r\\n   \\t\\tc = (tan(PI*Wb/2)-1) / (tan(PI*Wb/2)+1);\\r\\n    \\t\\td = -cos(PI*Wc);\\r\\n    \\t\\txh_new = x - d*(1-c)*xh[0] + c*xh[1];\\r\\n    \\t\\tap_y = -c * xh_new + d*(1-c)*xh[0] + xh[1];\\r\\n   \\t\\txh[1] = xh[0];\\r\\n   \\t\\txh[0] = xh_new;\\r\\n\\t\\tpOutput[sample] = 0.5 * (x - ap_y); // change to '+' for bandreject\\r\\n\\t}\\r\\n\\t// alla fine del filtraggio salvo i coefficienti di stato del filtro\\r\\n\\tmemory[0] = xh[0];\\r\\n\\tmemory[1] = xh[1];\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"",
        "CHeaderFiles": {
          "adi_ss_extmod.h": "\"/****************************************************************************\\r\\nCopyright (c) 2022 - Analog Devices Inc. All Rights Reserved.\\r\\nThis software is proprietary & confidential to Analog Devices, Inc.\\r\\nand its licensors.\\r\\n*****************************************************************************\\r\\n\\r\\nDescription: Common header file for implementing plugin modules.\\r\\n\\r\\n*****************************************************************************/\\r\\n\\r\\n#ifndef  __ADI_SS_EXTMOD_H__\\r\\n#define  __ADI_SS_EXTMOD_H__\\r\\n\\r\\n/*============= I N C L U D E S =============*/\\r\\n\\r\\n#include <platform_include.h>\\r\\n#include <adi_types.h>\\r\\n\\r\\n/*============= D E F I N E S =============*/\\r\\n\\r\\n\\r\\n/*=============  D A T A    T Y P E S   =============*/\\r\\n\\r\\n#if defined(_LANGUAGE_C)\\r\\n\\r\\n#ifdef __cplusplus\\r\\nextern \\\"C\\\" {\\r\\n#endif /* __cplusplus */\\r\\n\\r\\n/*\\r\\n**  Structure: BlockProperties\\r\\n**  Input/Output block property structure\\r\\n*/\\r\\n\\r\\ntypedef struct _BlockProperties\\r\\n{\\r\\n    int32_t     nSamplingRate;  /* Sample rate of the audio block */\\r\\n    int32_t     nBlockSize;     /* Block size of the audio block */\\r\\n    int32_t     nReserve0;      /* Reserved */\\r\\n    int32_t     nReserve1;      /* Reserved */    \\r\\n} BlockProperties;\\r\\n\\r\\n\\r\\n/*\\r\\n**  Structure: Block\\r\\n**  Input/Output block structure\\r\\n*/\\r\\n\\r\\ntypedef struct _Block\\r\\n{\\r\\n    BlockProperties *pBlockProperties;\\r\\n    float32_t       *pSamples;  /* Pointer to the sample buffer */    \\r\\n} Block;\\r\\n\\r\\n\\r\\n/*\\r\\n**  Structure: SSBlockAlgo\\r\\n**  Block algorithm argument structure\\r\\n*/\\r\\n\\r\\ntypedef struct _SSBlockAlgo\\r\\n{\\r\\n    int32_t     nInputs;        /* Number of input pins */\\r\\n    int32_t     nOutputs;       /* Number of output pins */\\r\\n    Block      *pInputs;        /* Pointer to array of block i/o mem structure */\\r\\n    Block      *pOutputs;       /* Pointer to array of block i/o mem structure */\\r\\n    \\r\\n    int32_t     nGrowth;        /* Indicates growth count */\\r\\n    int32_t     nGrowthB;       /* Secondary growth count */\\r\\n    \\r\\n    void       *pParam;         /* Pointer to parameter memory */\\r\\n    float32_t  *pState;         /* Pointer to state memory */\\r\\n    float32_t  *pScratchDM;     /* Pointer to scratch in DM memory */ \\r\\n    float32_t  *pScratchPM;     /* Pointer to scratch in PM memory */ \\r\\n    float32_t  *pStateB;        /* Pointer to state memory B */ \\r\\n    float32_t  *pStateC;        /* Pointer to state memory C */ \\r\\n    float32_t  *pExtPreState;   /* Pointer to extended precision state memory */\\r\\n    int32_t    *pExtSymbols;    /* Pointer to symbol address table */\\r\\n    float32_t  *pSharedMem;     /* Pointer to shared memory buffer in L2 */        \\r\\n} SSBlockAlgo;\\r\\n\\r\\n\\r\\n#ifdef __cplusplus\\r\\n}\\r\\n#endif  /* __cplusplus */\\r\\n\\r\\n#else   /* not _LANGUAGE_C */\\r\\n\\r\\n/* Assembler-specific definitions */\\r\\n\\r\\n#endif  /* _LANGUAGE_C */\\r\\n\\r\\n#endif /*__ADI_SS_EXTMOD_H__*/\\r\\n\\r\\n/*\\r\\n** EOF: \\r\\n*/\\r\\n\""
        },
        "EmbeddedDLBs": {},
        "ReferencedDLBs": {},
        "AlgorithmProperties": {
          "$type": "System.Collections.ObjectModel.Collection`1[[System.String, mscorlib]], mscorlib",
          "$values": []
        },
        "GenerateAlgorithm": true,
        "GenerateCompute": true,
        "ComputePluginReference": "AnalogDevices.Plugins.ComputeFunctions.Designer.APBandPass_v1.0.0.0",
        "GenerateUI": true,
        "ControlPluginReference": "AnalogDevices.Plugins.SigmaStudioControls.Algorithms.Designer.APBandPass_v1.0.0.0",
        "GenerateControl": true
      }
    ]
  },
  "AssemblyTitle": null,
  "AssemblyDescription": null,
  "AssemblyCompany": null,
  "AssemblyProduct": null,
  "AssemblyCopyright": null,
  "ComVisible": false,
  "AssemblyVersion": "1.0.0.0"
}